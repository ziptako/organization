// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	organizationsFieldNames          = builder.RawFieldNames(&Organizations{}, true)
	organizationsRows                = strings.Join(organizationsFieldNames, ",")
	organizationsRowsExpectAutoSet   = strings.Join(stringx.Remove(organizationsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	organizationsRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(organizationsFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))

	cacheOrgOrganizationsIdPrefix = "cache:org:organizations:id:"
)

type (
	organizationsModel interface {
		Insert(ctx context.Context, data *Organizations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Organizations, error)
		Update(ctx context.Context, data *Organizations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOrganizationsModel struct {
		sqlc.CachedConn
		table string
	}

	Organizations struct {
		Id         int64         `db:"id"`
		ParentId   sql.NullInt64 `db:"parent_id"`
		Name       string        `db:"name"`
		CreatedAt  time.Time     `db:"created_at"`
		UpdatedAt  time.Time     `db:"updated_at"`
		DisabledAt sql.NullTime  `db:"disabled_at"`
		DeletedAt  sql.NullTime  `db:"deleted_at"`
	}
)

func newOrganizationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOrganizationsModel {
	return &defaultOrganizationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"org"."organizations"`,
	}
}

func (m *defaultOrganizationsModel) Delete(ctx context.Context, id int64) error {
	orgOrganizationsIdKey := fmt.Sprintf("%s%v", cacheOrgOrganizationsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, orgOrganizationsIdKey)
	return err
}

func (m *defaultOrganizationsModel) FindOne(ctx context.Context, id int64) (*Organizations, error) {
	orgOrganizationsIdKey := fmt.Sprintf("%s%v", cacheOrgOrganizationsIdPrefix, id)
	var resp Organizations
	err := m.QueryRowCtx(ctx, &resp, orgOrganizationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", organizationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOrganizationsModel) Insert(ctx context.Context, data *Organizations) (sql.Result, error) {
	orgOrganizationsIdKey := fmt.Sprintf("%s%v", cacheOrgOrganizationsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, organizationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ParentId, data.Name, data.DisabledAt, data.DeletedAt)
	}, orgOrganizationsIdKey)
	return ret, err
}

func (m *defaultOrganizationsModel) Update(ctx context.Context, data *Organizations) error {
	orgOrganizationsIdKey := fmt.Sprintf("%s%v", cacheOrgOrganizationsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, organizationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.ParentId, data.Name, data.DisabledAt, data.DeletedAt)
	}, orgOrganizationsIdKey)
	return err
}

func (m *defaultOrganizationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheOrgOrganizationsIdPrefix, primary)
}

func (m *defaultOrganizationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", organizationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOrganizationsModel) tableName() string {
	return m.table
}
