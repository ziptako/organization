// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: organization.proto

package server

import (
	"context"

	"github.com/ziptako/organization/internal/logic/organizationservice"
	"github.com/ziptako/organization/internal/svc"
	"github.com/ziptako/organization/organization"
)

type OrganizationServiceServer struct {
	svcCtx *svc.ServiceContext
	organization.UnimplementedOrganizationServiceServer
}

func NewOrganizationServiceServer(svcCtx *svc.ServiceContext) *OrganizationServiceServer {
	return &OrganizationServiceServer{
		svcCtx: svcCtx,
	}
}

// CreateOrganization 创建组织节点
func (s *OrganizationServiceServer) CreateOrganization(ctx context.Context, in *organization.CreateOrganizationRequest) (*organization.CreateOrganizationResponse, error) {
	l := organizationservicelogic.NewCreateOrganizationLogic(ctx, s.svcCtx)
	return l.CreateOrganization(in)
}

// GetOrganization 获取组织节点
func (s *OrganizationServiceServer) GetOrganization(ctx context.Context, in *organization.GetOrganizationRequest) (*organization.Organization, error) {
	l := organizationservicelogic.NewGetOrganizationLogic(ctx, s.svcCtx)
	return l.GetOrganization(in)
}

// UpdateOrganization 更新组织节点名称
func (s *OrganizationServiceServer) UpdateOrganization(ctx context.Context, in *organization.UpdateOrganizationRequest) (*organization.Organization, error) {
	l := organizationservicelogic.NewUpdateOrganizationLogic(ctx, s.svcCtx)
	return l.UpdateOrganization(in)
}

// DeleteOrganization 删除组织节点
func (s *OrganizationServiceServer) DeleteOrganization(ctx context.Context, in *organization.DeleteOrganizationRequest) (*organization.DeleteOrganizationResponse, error) {
	l := organizationservicelogic.NewDeleteOrganizationLogic(ctx, s.svcCtx)
	return l.DeleteOrganization(in)
}

// ListOrganizations 分页查询子节点
func (s *OrganizationServiceServer) ListOrganizations(ctx context.Context, in *organization.ListOrganizationsRequest) (*organization.ListOrganizationsResponse, error) {
	l := organizationservicelogic.NewListOrganizationsLogic(ctx, s.svcCtx)
	return l.ListOrganizations(in)
}

// GetAncestors 获取祖先链
func (s *OrganizationServiceServer) GetAncestors(ctx context.Context, in *organization.GetAncestorsRequest) (*organization.GetAncestorsResponse, error) {
	l := organizationservicelogic.NewGetAncestorsLogic(ctx, s.svcCtx)
	return l.GetAncestors(in)
}

// GetDescendants 获取后代树
func (s *OrganizationServiceServer) GetDescendants(ctx context.Context, in *organization.GetDescendantsRequest) (*organization.GetDescendantsResponse, error) {
	l := organizationservicelogic.NewGetDescendantsLogic(ctx, s.svcCtx)
	return l.GetDescendants(in)
}
